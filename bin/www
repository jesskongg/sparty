#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sparty:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// setup socket.io
var io = require('socket.io')(server);

// variables for votes
var candidates = {};
var nextSong = {}; // default song
// define namespace on server
var nsp = io.of('/api/rooms');

nsp.on('connection', function (socket) {
  socket.on('room', function(room) {
    socket.room = room;
    socket.join(room);
    nsp.in(room).clients((error, clients) => {
      if (error) throw error;
      nsp.to(room).emit('people_join', clients.length)
    })
    nsp.to(socket.room).emit('show_list', candidates[socket.room]);
    nsp.to(socket.room).emit('update current song', nextSong);
  })

  socket.on('disconnect', function() {
    nsp.in(socket.room).clients((error, clients) => {
      if (error) throw error;
      nsp.to(socket.room).emit('people_left', clients.length);
    })
  })

  socket.on('add_candidate', function(ea) {
    if (socket.room in candidates) {
      if (candidates[socket.room][ea.id]) {
        candidates[socket.room][ea.id].vote++;
      } else {
        candidates[socket.room][ea.id] = ea;
      }
    } else {
      candidates[socket.room] = {};
      candidates[socket.room][ea.id] = ea;
    }
  });

  socket.on('update_candidate_list', function(data) {
    nsp.to(socket.room).emit('show_list', candidates[socket.room]);
  })

  socket.on('add_vote', function(ea) {
    candidates[socket.room][ea.id].vote++;
    nsp.to(socket.room).emit('show_list', candidates[socket.room]);
  })

  socket.on('get next song', function(roomId) {
    // TODO: improve finding the top track
    var topTracks = candidates[roomId];
    if (topTracks) {
      topTracks = Object.values(topTracks);
      topTracks.sort(function(a, b) {
        return b.vote - a.vote;
      })
      // update top song
      nextSong = topTracks[0];
      // TODO: save the top track to database
      candidates[roomId][topTracks[0].id].vote = 0;
      nsp.to(roomId).emit('show_list', candidates[roomId]);
    }
    // send top track to Client
    nsp.to(roomId).emit('get top song', nextSong);
  })

  // update current playing song
  socket.on('current song', function(room) {
    nsp.to(room).emit('update current song', nextSong);
  })

});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
