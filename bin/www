#!/usr/bin/env node

/**
 * Module dependencies.
 */

var room_controller = require('../controllers/roomController');

var app = require('../app');
var debug = require('debug')('sparty:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// setup socket.io
var io = require('socket.io')(server);

// variables for votes
var candidates = {};
var nextSong = {}; // default song
// define namespace on server
var nsp = io.of('/api/rooms');

nsp.on('connection', function (socket) {
  socket.on('room', function(roomId) {
    socket.room = roomId;
    socket.join(roomId);
    // initialize candidate list and next song for the roomId
    if (!(roomId in candidates)) {
      candidates[roomId] = {};
      nextSong[roomId] = {};
    }
    nsp.in(roomId).clients((error, clients) => {
      if (error) throw error;
      nsp.to(roomId).emit('people_join', clients.length)
    })
    nsp.to(roomId).emit('show_list', candidates[roomId]);
    nsp.to(roomId).emit('update current song', nextSong[roomId]);
  })

  socket.on('disconnect', function() {
    nsp.in(socket.room).clients((error, clients) => {
      if (error) throw error;
      nsp.to(socket.room).emit('people_left', clients.length);
    })
  })

  socket.on('add_candidate', function(ea) {
    addCandidate(socket, ea);
  });

  socket.on('update_candidate_list', function(data) {
    data.forEach(function(ea) {
      addCandidate(socket, ea);
    })
    nsp.to(socket.room).emit('show_list', candidates[socket.room]);
  })

  socket.on('add_vote', function(ea) {
    let ip = getClientIp(socket.request);
    console.log('add-vote: ip' + ip);
    if (!candidates[socket.room][ea.id].remoteAddress.includes(ip)) {
      candidates[socket.room][ea.id].vote++;
      candidates[socket.room][ea.id].remoteAddress.push(ip);
      nsp.to(socket.room).emit('show_list', candidates[socket.room]);
    }
  })

  socket.on('get next song', function(roomId) {
    // TODO: improve finding the top track
    var topTracks = Object.values(candidates[roomId]);
    if (topTracks.length) {
      nextSong[roomId] = topTracks.reduce(function(prev, current) {
        return (prev.vote > current.vote) ? prev : current
      })
      // save the top song to database
      room_controller.room_add_song(nextSong[roomId], roomId);

      candidates[roomId][nextSong[roomId].id].vote = 0;
      candidates[roomId][nextSong[roomId].id].remoteAddress = [];
      nsp.to(roomId).emit('show_list', candidates[roomId]);
      nsp.to(roomId).emit('get top song', nextSong[roomId]);
    }
  })

  // update current playing song
  socket.on('current song', function(roomId) {
    nsp.to(roomId).emit('update current song', nextSong[roomId]);
  })

});

function addCandidate(socket, ea) {
  let ip = getClientIp(socket.request);
  console.log('add-candidate ip' + ip);
  if (candidates[socket.room][ea.id]) {
    if (!candidates[socket.room][ea.id].remoteAddress.includes(ip)) {
      candidates[socket.room][ea.id].vote++;
      candidates[socket.room][ea.id].remoteAddress.push(ip);
    }
  } else {
    candidates[socket.room][ea.id] = ea;
    candidates[socket.room][ea.id].remoteAddress = [];
    candidates[socket.room][ea.id].remoteAddress.push(ip);
  }
}

// https://stackoverflow.com/questions/14382725/how-to-get-the-correct-ip-address-of-a-client-into-a-node-socket-io-app-hosted-o?lq=1
function getClientIp(req) {
  var ipAddress;
  // Amazon EC2 / Heroku workaround to get real client IP
  var forwardedIpsStr = req.headers['x-forwarded-for'];
  if (forwardedIpsStr) {
    // 'x-forwarded-for' header may return multiple IP addresses in
    // the format: "client IP, proxy 1 IP, proxy 2 IP" so take the
    // the first one
    var forwardedIps = forwardedIpsStr.split(',');
    forwardedIps.forEach((ea) => {
      console.log(ea);
    })
    ipAddress = forwardedIps[0];
  }
  if (!ipAddress) {
    // Ensure getting client IP address still works in
    // development environment
    ipAddress = req.connection.remoteAddress;
  }
  return ipAddress;
};

// check every hour if there is a room is expired
// setInterval(room_controller.room_cleanup, 60 * 60 * 1000);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
